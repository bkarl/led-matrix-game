/* automatically generated by rust-bindgen 0.59.1 */
#![no_std]
use core::panic::PanicInfo;
mod drawing_game;
use cursors::SingleCursor;
mod helpers;
use helpers::*;
use drawing_game::{DrawingGame, CMD_LEN};
mod cursors;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UserInput {
    pub left_rotary_val: cty::c_int,
    pub right_rotary_val: cty::c_int,
    pub left_button_pressed: cty::c_int,
    pub right_button_pressed: cty::c_int,
}

impl UserInput {
    pub const fn new() -> UserInput {
        UserInput { left_rotary_val: 0, right_rotary_val: 0, left_button_pressed: 0, right_button_pressed: 0 }
    }
}

#[cfg(test)]
extern crate std;


static mut CURSOR : SingleCursor = SingleCursor::new();
static mut DRAWING_GAME : DrawingGame = unsafe {DrawingGame::new(&CURSOR)};

#[no_mangle]
pub extern "C" fn user_input(input: UserInput) {
    unsafe {DRAWING_GAME.user_input(input)};
}

#[no_mangle]
pub extern "C" fn get_matrix_cmd_word(buf: *mut cty::uint8_t) {
    unsafe {
        let output_buffer = core::slice::from_raw_parts_mut(buf, 3*CMD_LEN);
        DRAWING_GAME.gen_set_color_cmd(output_buffer);
    }
}

#[cfg(not(test))]
#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    loop {}
}

#[test]
fn bindgen_test_layout_UserInput() {
    assert_eq!(
        ::std::mem::size_of::<UserInput>(),
        16usize,
        concat!("Size of: ", stringify!(UserInput))
    );
    assert_eq!(
        ::std::mem::align_of::<UserInput>(),
        4usize,
        concat!("Alignment of ", stringify!(UserInput))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UserInput>())).left_rotary_val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UserInput),
            "::",
            stringify!(left_rotary_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UserInput>())).right_rotary_val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UserInput),
            "::",
            stringify!(right_rotary_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UserInput>())).left_button_pressed as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UserInput),
            "::",
            stringify!(left_button_pressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UserInput>())).right_button_pressed as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UserInput),
            "::",
            stringify!(right_button_pressed)
        )
    );
}